<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAAJcEhZcwAAAU4AAAFOARZ4frAAAAAZdEVYdFNvZnR3YXJlAHd3dy5pbmtzY2FwZS5vcmeb7jwa
        AAAC5klEQVRYR7WX34tNURTH9z7HkLwp8ciTkKQpGcWjB/+AlBceSJFSarwoJT9KXsiPMvOEwjCSQpQf
        hfxIMWke5ElKoZibUFfXZ829d84666x7z8Wxm8+Ze/b6ftfaZ+99zrk3NBqNjtD6Q0i2JiE5HUP6LIak
        Bi85H6Z/O/EBiJ63V/zOEObGEC9TrFFOvIN+vpenF4odId1A4k/FQl2pMSPb/mY2cicytU5y4TtL8JT4
        Wf4/5FyWwtHF6wwi0TnLyD6EdL2T9DWBNRLMmSgC/QzmifUQ2q21ZTQPIczB/FEl+sXVHqJ/hjVoaCkF
        B9H/VN4f9C/x9B6TB6bukkrQoPgRK+wGg9il/fBCBudpLdKWGvMb+mZ64k7QktbemMpD34CntdDSTXlj
        us4TlkFbnM+TDHo6i+z8Y8pYJ9EfXb0G/4csV7zhaSyYclM35ol6haI3Va4JLqb0uSCjVrs/jniiXmE2
        j2e5kpqnscgMPFKmV56oV8wMjHsaix11lXvgtqex0NLNmUl277S1nrAM2kKdhwsb8nQWacu0Ecbp6/oE
        tNAiS3lP56Fvlae1TB6YrqvazOgPWmE3WMgd2i97wdN5NA8hzMP4WSWpM4h99E+3Bo1U5k8ew7wtswHQ
        v8LTe2QfQrpRJ2kxRmC1BHMmuXmab8PHjucdsdla343cCVd93kkofJMHFvEzrbX+auKWLzDBUlxhMLN0
        DUuxI6RbMHf4wtGROsVGnX6Id0na8db2O0NYwJXe9xNa4ij6ReLD86CD5hYa984qdLShyTovlx3O1F8g
        0Xtgo6bPOb8Ih4mv1B5ihW9IGfEa+j6tF3In/4p9qBWJIyLKefRJFTBje/3iTZi5cyKa0mtzVVDkgFe8
        DXF+2DRf1W6CKqDIUa94G+InReeaq4IiJ7zibWS5XGNVyDQziCGveIu3rrFKZMMxCH5RFQdAaI9rqhpa
        yi1of3vsn4xZ8f+C1kfRUxTnZZXsbPY3wm9IJqNutem7UAAAAABJRU5ErkJggg==
</value>
  </data>
  <data name="button1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        iVBORw0KGgoAAAANSUhEUgAAAGgAAABoCAYAAAAdHLWhAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
        YQUAAAL4SURBVHhe7ZxbbtswEEWdnXQ5RbuBFoj/i3YR6c68tFR0GNeUR+TowfGQPAe4yMOkIs6dS9EJ
        kFNTvMw+eqeV+3QPhQSASoy+vbC9OgRTnoTrwtMVADUgWQAA0DufzzqLZ5675+reG+Kg0BgYtpORC0jz
        gC09dtz9mkgUADQC29WMeUHC19L3RoImGQWcXodZvdb8IEyEzXTTPDUXMrv2t9ffbxn9lRSnJnz98evL
        9Jp0jSDxOmFOnJ4wvSZd41PiteLUY/DUSGFx31//vK/QJU5NCMUWxma1ZND02mU+NqfDDfIEBjnnKQad
        Pz5ikAIS5BwStBWjk8S0uDdp0RmRIEvcGhRTphEGpeorQUs7lZf3QsMbtETzBs0W0J1BpmS6wTRB98+V
        6XMMUhANCgXJ6/z/8zg1IRqUzimoYJBa7RnkZf+0YrT1jrdgz7RmhvZ+aTJok1zneu1qz2kLJ6m1ilMT
        pHEaxekJ0riS4tQPetreTN8HzfRQ2Mj0Wjg+i3MkjfA+SFz4gjBIJMS2QnSbNij+ZqKfBAkGkyDnJAbp
        /gaDQZaQoJVYnxAxyDk3g/R/YsYgS0iQc3YZdLcfY1Alhk6Q9QN/C0Mb1AKhSGsVpyZI4zSK0xOkcSXF
        qdvYnaQWoghgDsEAcMneaLYY7V63o3jMDsdateLUhHCSksbmdD19CYWVxubk55hdoUt4H+Scbg3qZcu7
        GqT/TXYQCbLExKCF66sNKtxf/wYJi77psTiyQT9JUBVuCdKniC3OkmKCHlU2SGl4vwYdeEKpYpBSaoMK
        ZpOgVBepQaoaVJDKoHDPLR69Vxt05hlkyqYECYxrUOVYhsUtSPpnelctbXHS2JxEg6ZrS2MLcpygFvfV
        mmjr4bJuI5lJ48LzoPsAAHZxv42ypT4Rim+MdcEx+A6vxcAk2AcdBCbQaAfQchFpgAxrinN0ITEGYDiI
        PcBoDJH6IxdZs2BswQAjoUo82wIklBrCU8M87V6O/ME9JbCntVRjxCK9nE7/ABzu74V2hEbSAAAAAElF
        TkSuQmCC
</value>
  </data>
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAOwAAADsAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHAAAAKoAAADxAAAA8QAAAKwAAAAlAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACcAAADtAAAA/wAAAP8AAAD/AAAA/wAA
        AO0AAAAlAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArgAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAKwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADyAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA8AAAAAAAAAADAAAA+gAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAMEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        APIAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAADxAAAAAAAAAA0AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAuwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAArAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAKoAAAAAAAAAOAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAdAAAA7QAAAP8AAAD/AAAA/wAAAP8AAADtAAAAHAAAAAAAAACUAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAdAAAArAAAAPIAAADyAAAArgAAACcAAAAAAAAAMQAA
        APkAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ADAAAADkAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAACwAA
        ADcAAACTAAAA+QAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        APoAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAP8AAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAC0AAAABwAA
        AAAAAAAAAAAAAAAAAAAAAAAHAAAAtQAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAA/wAAAP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAgAAAAAAAAAB4AAAA/wAAAP8AAAB4AAAAAAAAAIAAAAD/AAAA/wAAAP8AAAD/AAAA/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAACAAAAAAAAAAIAAAAD/AAAA/wAAAIAAAAAAAAAAgAAAAP8AAAD/AAAA/wAA
        AP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAD/AAAA/wAAAP8AAAD/AAAA/wAAAIAAAAAAAAAAgAAAAP8AAAD/AAAAgAAAAAAAAACAAAAA/wAA
        AP8AAAD/AAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAP8AAAD/AAAA/wAAAP8AAAD/AAAAeAAAAAAAAAB5AAAA/wAAAP8AAAB4AAAAAAAA
        AHkAAAD/AAAA/wAAAP8AAAD/AAAAwwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/wAAAP8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/AAAA/wAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AP8AAAD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABJAAAASgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAA/wAAAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPUAAAD3AAAABgAA
        AAAAAAAAAAAAAAAAAAYAAAD/AAAA/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3gAA
        AP8AAABDAAAAAAAAAAAAAAAAAAAARAAAAP8AAADbAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAACDAAAA/wAAAOAAAABDAAAACwAAAEUAAADhAAAA/wAAAIEAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAoAAADHAAAA/wAAAP8AAAD/AAAA/wAAAP8AAADGAAAACQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoAAACCAAAA3QAAAPoAAADdAAAAgQAAAAkAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/gf///wD///8A////AIAA/wCAAP8AgAf/AIAH/4EAB//+AAf/4AAH/+A
        AB//gAAf/4AAH/+AAB//gPAf/4H4H/+BCB//gQgf/4EIH/+BCB//n////5////+f////n////5////+f
        ///Pn///xx///8cf///AH///wB///+A///8=
</value>
  </data>
</root>